// Code generated by MockGen. DO NOT EDIT.
// Source: entry_repository_interface.go

// Package entry_repository_mock is a generated GoMock package.
package entry_repository_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	collection "github.com/anoriar/gophkeeper/internal/server/entry/dto/collection"
	entity "github.com/anoriar/gophkeeper/internal/server/entry/entity"
	enum "github.com/anoriar/gophkeeper/internal/server/entry/enum"
)

// MockEntryRepositoryInterface is a mock of EntryRepositoryInterface interface.
type MockEntryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEntryRepositoryInterfaceMockRecorder
}

// MockEntryRepositoryInterfaceMockRecorder is the mock recorder for MockEntryRepositoryInterface.
type MockEntryRepositoryInterfaceMockRecorder struct {
	mock *MockEntryRepositoryInterface
}

// NewMockEntryRepositoryInterface creates a new mock instance.
func NewMockEntryRepositoryInterface(ctrl *gomock.Controller) *MockEntryRepositoryInterface {
	mock := &MockEntryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEntryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryRepositoryInterface) EXPECT() *MockEntryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddEntries mocks base method.
func (m *MockEntryRepositoryInterface) AddEntries(ctx context.Context, entries []entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntries", ctx, entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntries indicates an expected call of AddEntries.
func (mr *MockEntryRepositoryInterfaceMockRecorder) AddEntries(ctx, entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntries", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).AddEntries), ctx, entries)
}

// DeleteEntries mocks base method.
func (m *MockEntryRepositoryInterface) DeleteEntries(ctx context.Context, entriesIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntries", ctx, entriesIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntries indicates an expected call of DeleteEntries.
func (mr *MockEntryRepositoryInterfaceMockRecorder) DeleteEntries(ctx, entriesIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntries", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).DeleteEntries), ctx, entriesIds)
}

// GetEntriesByUserIDAndType mocks base method.
func (m *MockEntryRepositoryInterface) GetEntriesByUserIDAndType(ctx context.Context, userID string, entryType enum.EntryType) (collection.EntryCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByUserIDAndType", ctx, userID, entryType)
	ret0, _ := ret[0].(collection.EntryCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByUserIDAndType indicates an expected call of GetEntriesByUserIDAndType.
func (mr *MockEntryRepositoryInterfaceMockRecorder) GetEntriesByUserIDAndType(ctx, userID, entryType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByUserIDAndType", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).GetEntriesByUserIDAndType), ctx, userID, entryType)
}

// UpdateEntries mocks base method.
func (m *MockEntryRepositoryInterface) UpdateEntries(ctx context.Context, entries []entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntries", ctx, entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntries indicates an expected call of UpdateEntries.
func (mr *MockEntryRepositoryInterfaceMockRecorder) UpdateEntries(ctx, entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntries", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).UpdateEntries), ctx, entries)
}
