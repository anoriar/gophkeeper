// Code generated by MockGen. DO NOT EDIT.
// Source: secret_repository_interface.go

// Package mock_secret_repository is a generated GoMock package.
package mock_secret_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretRepositoryInterface is a mock of SecretRepositoryInterface interface.
type MockSecretRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRepositoryInterfaceMockRecorder
}

// MockSecretRepositoryInterfaceMockRecorder is the mock recorder for MockSecretRepositoryInterface.
type MockSecretRepositoryInterfaceMockRecorder struct {
	mock *MockSecretRepositoryInterface
}

// NewMockSecretRepositoryInterface creates a new mock instance.
func NewMockSecretRepositoryInterface(ctrl *gomock.Controller) *MockSecretRepositoryInterface {
	mock := &MockSecretRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSecretRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRepositoryInterface) EXPECT() *MockSecretRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAuthToken mocks base method.
func (m *MockSecretRepositoryInterface) GetAuthToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockSecretRepositoryInterfaceMockRecorder) GetAuthToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockSecretRepositoryInterface)(nil).GetAuthToken))
}

// GetMasterPassword mocks base method.
func (m *MockSecretRepositoryInterface) GetMasterPassword() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterPassword")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterPassword indicates an expected call of GetMasterPassword.
func (mr *MockSecretRepositoryInterfaceMockRecorder) GetMasterPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterPassword", reflect.TypeOf((*MockSecretRepositoryInterface)(nil).GetMasterPassword))
}

// SaveAuthToken mocks base method.
func (m *MockSecretRepositoryInterface) SaveAuthToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuthToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuthToken indicates an expected call of SaveAuthToken.
func (mr *MockSecretRepositoryInterfaceMockRecorder) SaveAuthToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuthToken", reflect.TypeOf((*MockSecretRepositoryInterface)(nil).SaveAuthToken), token)
}

// SaveMasterPassword mocks base method.
func (m *MockSecretRepositoryInterface) SaveMasterPassword(pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMasterPassword", pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMasterPassword indicates an expected call of SaveMasterPassword.
func (mr *MockSecretRepositoryInterfaceMockRecorder) SaveMasterPassword(pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMasterPassword", reflect.TypeOf((*MockSecretRepositoryInterface)(nil).SaveMasterPassword), pass)
}
