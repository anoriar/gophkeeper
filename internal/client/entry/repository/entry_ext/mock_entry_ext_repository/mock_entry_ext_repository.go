// Code generated by MockGen. DO NOT EDIT.
// Source: entry_ext_repository_interface.go

// Package mock_entry_ext_repository is a generated GoMock package.
package mock_entry_ext_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entry_ext "github.com/anoriar/gophkeeper/internal/client/entry/dto/repository/entry_ext"
)

// MockEntryExtRepositoryInterface is a mock of EntryExtRepositoryInterface interface.
type MockEntryExtRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEntryExtRepositoryInterfaceMockRecorder
}

// MockEntryExtRepositoryInterfaceMockRecorder is the mock recorder for MockEntryExtRepositoryInterface.
type MockEntryExtRepositoryInterfaceMockRecorder struct {
	mock *MockEntryExtRepositoryInterface
}

// NewMockEntryExtRepositoryInterface creates a new mock instance.
func NewMockEntryExtRepositoryInterface(ctrl *gomock.Controller) *MockEntryExtRepositoryInterface {
	mock := &MockEntryExtRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEntryExtRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryExtRepositoryInterface) EXPECT() *MockEntryExtRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockEntryExtRepositoryInterface) Sync(ctx context.Context, token string, request entry_ext.SyncRequest) (entry_ext.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, token, request)
	ret0, _ := ret[0].(entry_ext.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockEntryExtRepositoryInterfaceMockRecorder) Sync(ctx, token, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockEntryExtRepositoryInterface)(nil).Sync), ctx, token, request)
}
