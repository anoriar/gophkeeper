// Code generated by MockGen. DO NOT EDIT.
// Source: entry_repository_interface.go

// Package mock_entry_repository is a generated GoMock package.
package mock_entry_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/anoriar/gophkeeper/internal/client/entry/entity"
)

// MockEntryRepositoryInterface is a mock of EntryRepositoryInterface interface.
type MockEntryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEntryRepositoryInterfaceMockRecorder
}

// MockEntryRepositoryInterfaceMockRecorder is the mock recorder for MockEntryRepositoryInterface.
type MockEntryRepositoryInterfaceMockRecorder struct {
	mock *MockEntryRepositoryInterface
}

// NewMockEntryRepositoryInterface creates a new mock instance.
func NewMockEntryRepositoryInterface(ctrl *gomock.Controller) *MockEntryRepositoryInterface {
	mock := &MockEntryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEntryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryRepositoryInterface) EXPECT() *MockEntryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEntryRepositoryInterface) Add(ctx context.Context, entry entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEntryRepositoryInterfaceMockRecorder) Add(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).Add), ctx, entry)
}

// Edit mocks base method.
func (m *MockEntryRepositoryInterface) Edit(ctx context.Context, entry entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockEntryRepositoryInterfaceMockRecorder) Edit(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).Edit), ctx, entry)
}

// GetById mocks base method.
func (m *MockEntryRepositoryInterface) GetById(ctx context.Context, id string) (entity.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entity.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockEntryRepositoryInterfaceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).GetById), ctx, id)
}

// GetList mocks base method.
func (m *MockEntryRepositoryInterface) GetList(ctx context.Context) ([]entity.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx)
	ret0, _ := ret[0].([]entity.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockEntryRepositoryInterfaceMockRecorder) GetList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).GetList), ctx)
}

// Rewrite mocks base method.
func (m *MockEntryRepositoryInterface) Rewrite(ctx context.Context, entries []entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rewrite", ctx, entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rewrite indicates an expected call of Rewrite.
func (mr *MockEntryRepositoryInterfaceMockRecorder) Rewrite(ctx, entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewrite", reflect.TypeOf((*MockEntryRepositoryInterface)(nil).Rewrite), ctx, entries)
}
