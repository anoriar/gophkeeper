// Code generated by MockGen. DO NOT EDIT.
// Source: data_encryptor_interface.go

// Package mock_data_encryptor is a generated GoMock package.
package mock_data_encryptor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataEncryptorInterface is a mock of DataEncryptorInterface interface.
type MockDataEncryptorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataEncryptorInterfaceMockRecorder
}

// MockDataEncryptorInterfaceMockRecorder is the mock recorder for MockDataEncryptorInterface.
type MockDataEncryptorInterfaceMockRecorder struct {
	mock *MockDataEncryptorInterface
}

// NewMockDataEncryptorInterface creates a new mock instance.
func NewMockDataEncryptorInterface(ctrl *gomock.Controller) *MockDataEncryptorInterface {
	mock := &MockDataEncryptorInterface{ctrl: ctrl}
	mock.recorder = &MockDataEncryptorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataEncryptorInterface) EXPECT() *MockDataEncryptorInterfaceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDataEncryptorInterface) Decrypt(data []byte, masterPass string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", data, masterPass)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDataEncryptorInterfaceMockRecorder) Decrypt(data, masterPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDataEncryptorInterface)(nil).Decrypt), data, masterPass)
}

// Encrypt mocks base method.
func (m *MockDataEncryptorInterface) Encrypt(data []byte, masterPass string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", data, masterPass)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockDataEncryptorInterfaceMockRecorder) Encrypt(data, masterPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockDataEncryptorInterface)(nil).Encrypt), data, masterPass)
}
